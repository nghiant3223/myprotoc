// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuildServiceClient is the client API for BuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildServiceClient interface {
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	ListBuildsByKeys(ctx context.Context, in *ListBuildsByKeysRequest, opts ...grpc.CallOption) (*ListBuildsByKeysResponse, error)
	GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*GetBuildResponse, error)
	GetBuildByID(ctx context.Context, in *GetBuildByIDRequest, opts ...grpc.CallOption) (*GetBuildByIDResponse, error)
	SubmitBuild(ctx context.Context, in *SubmitBuildRequest, opts ...grpc.CallOption) (*SubmitBuildResponse, error)
}

type buildServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildServiceClient(cc grpc.ClientConnInterface) BuildServiceClient {
	return &buildServiceClient{cc}
}

func (c *buildServiceClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, "/pb.BuildService/ListBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) ListBuildsByKeys(ctx context.Context, in *ListBuildsByKeysRequest, opts ...grpc.CallOption) (*ListBuildsByKeysResponse, error) {
	out := new(ListBuildsByKeysResponse)
	err := c.cc.Invoke(ctx, "/pb.BuildService/ListBuildsByKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*GetBuildResponse, error) {
	out := new(GetBuildResponse)
	err := c.cc.Invoke(ctx, "/pb.BuildService/GetBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) GetBuildByID(ctx context.Context, in *GetBuildByIDRequest, opts ...grpc.CallOption) (*GetBuildByIDResponse, error) {
	out := new(GetBuildByIDResponse)
	err := c.cc.Invoke(ctx, "/pb.BuildService/GetBuildByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) SubmitBuild(ctx context.Context, in *SubmitBuildRequest, opts ...grpc.CallOption) (*SubmitBuildResponse, error) {
	out := new(SubmitBuildResponse)
	err := c.cc.Invoke(ctx, "/pb.BuildService/SubmitBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildServiceServer is the server API for BuildService service.
// All implementations must embed UnimplementedBuildServiceServer
// for forward compatibility
type BuildServiceServer interface {
	ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error)
	ListBuildsByKeys(context.Context, *ListBuildsByKeysRequest) (*ListBuildsByKeysResponse, error)
	GetBuild(context.Context, *GetBuildRequest) (*GetBuildResponse, error)
	GetBuildByID(context.Context, *GetBuildByIDRequest) (*GetBuildByIDResponse, error)
	SubmitBuild(context.Context, *SubmitBuildRequest) (*SubmitBuildResponse, error)
	mustEmbedUnimplementedBuildServiceServer()
}

// UnimplementedBuildServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuildServiceServer struct {
}

func (UnimplementedBuildServiceServer) ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuilds not implemented")
}
func (UnimplementedBuildServiceServer) ListBuildsByKeys(context.Context, *ListBuildsByKeysRequest) (*ListBuildsByKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildsByKeys not implemented")
}
func (UnimplementedBuildServiceServer) GetBuild(context.Context, *GetBuildRequest) (*GetBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuild not implemented")
}
func (UnimplementedBuildServiceServer) GetBuildByID(context.Context, *GetBuildByIDRequest) (*GetBuildByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildByID not implemented")
}
func (UnimplementedBuildServiceServer) SubmitBuild(context.Context, *SubmitBuildRequest) (*SubmitBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBuild not implemented")
}
func (UnimplementedBuildServiceServer) mustEmbedUnimplementedBuildServiceServer() {}

// UnsafeBuildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildServiceServer will
// result in compilation errors.
type UnsafeBuildServiceServer interface {
	mustEmbedUnimplementedBuildServiceServer()
}

func RegisterBuildServiceServer(s grpc.ServiceRegistrar, srv BuildServiceServer) {
	s.RegisterService(&BuildService_ServiceDesc, srv)
}

func _BuildService_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BuildService/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_ListBuildsByKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsByKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).ListBuildsByKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BuildService/ListBuildsByKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).ListBuildsByKeys(ctx, req.(*ListBuildsByKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BuildService/GetBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).GetBuild(ctx, req.(*GetBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_GetBuildByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).GetBuildByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BuildService/GetBuildByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).GetBuildByID(ctx, req.(*GetBuildByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_SubmitBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).SubmitBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BuildService/SubmitBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).SubmitBuild(ctx, req.(*SubmitBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildService_ServiceDesc is the grpc.ServiceDesc for BuildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BuildService",
	HandlerType: (*BuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuilds",
			Handler:    _BuildService_ListBuilds_Handler,
		},
		{
			MethodName: "ListBuildsByKeys",
			Handler:    _BuildService_ListBuildsByKeys_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _BuildService_GetBuild_Handler,
		},
		{
			MethodName: "GetBuildByID",
			Handler:    _BuildService_GetBuildByID_Handler,
		},
		{
			MethodName: "SubmitBuild",
			Handler:    _BuildService_SubmitBuild_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/proto/service.proto",
}

// BuildAdminServiceClient is the client API for BuildAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildAdminServiceClient interface {
}

type buildAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildAdminServiceClient(cc grpc.ClientConnInterface) BuildAdminServiceClient {
	return &buildAdminServiceClient{cc}
}

// BuildAdminServiceServer is the server API for BuildAdminService service.
// All implementations must embed UnimplementedBuildAdminServiceServer
// for forward compatibility
type BuildAdminServiceServer interface {
	mustEmbedUnimplementedBuildAdminServiceServer()
}

// UnimplementedBuildAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuildAdminServiceServer struct {
}

func (UnimplementedBuildAdminServiceServer) mustEmbedUnimplementedBuildAdminServiceServer() {}

// UnsafeBuildAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildAdminServiceServer will
// result in compilation errors.
type UnsafeBuildAdminServiceServer interface {
	mustEmbedUnimplementedBuildAdminServiceServer()
}

func RegisterBuildAdminServiceServer(s grpc.ServiceRegistrar, srv BuildAdminServiceServer) {
	s.RegisterService(&BuildAdminService_ServiceDesc, srv)
}

// BuildAdminService_ServiceDesc is the grpc.ServiceDesc for BuildAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BuildAdminService",
	HandlerType: (*BuildAdminServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/v1/proto/service.proto",
}
